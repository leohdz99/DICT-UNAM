/*
 * Copyright (C) 2017 58599749
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package geologia.vista;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.File;
import java.io.FileOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import geologia.modelo.ConexionBD;
import geologia.modelo.dao.HorarioDAO;
import geologia.modelo.dto.Horario;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;

/**
 *
 * @author 58599749
 */
public class GeneradorPDF extends javax.swing.JFrame {


    /**
     * Creates new form GeneradorPDF
     */
    public GeneradorPDF() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtRuta = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Generar PDF");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(txtRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser dlg = new JFileChooser();
        int opcion = dlg.showSaveDialog(this);
        if(opcion == JFileChooser.APPROVE_OPTION){
            File f = dlg.getSelectedFile();
            txtRuta.setText(f.toString());
        } 
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
       String ruta = txtRuta.getText();
       ResultSet horariosRs = null;
       int totalTuplas = 0;
       String query;
       Connection conexion;
       Statement orden = null;
        
       //ResultSet rsHorarios = HorarioDAO.obtenerHorarios(String salon, String nombreProf);
        
       try{
			conexion = ConexionBD.obtenerConexion();
			orden = conexion.createStatement();
                        /*query = "SELECT concat(Horario.horaEntrada, ' - ', Horario.horaSalida) as Horario, Horario.grupo as Grupo, Horario.tipo as Tipo, salon.salon as Salon, salon.cupoSalon as Cupo, salon.vacanteSalon as Vacante, "+ 
                                "D1.dias AS 'Dia 1', D2.dias AS 'Dia 2' , D3.dias AS 'Dia 3', Asignatura.claveAsignatura as Clave, Asignatura.nombreAsignatura as Asignatura, Profesor.folioProfesor as 'Folio Profesor', "+
                                "concat(Profesor.tituloProfesor,' ',Profesor.nombreProfesor,' ',Profesor.apellidoPaternoProfesor,' ', Profesor.apellidoMaternoProfesor) as Profesor "+
                                "FROM Horario "+
                                "Inner JOIN Asignatura ON Horario.idAsignatura = Asignatura.idAsignatura "+
                                "INNER JOIN Profesor ON Horario.idProfesor = Profesor.idProfesor "+
                                "INNER JOIN Dias D1 ON Horario.Dia1 = D1.idDias "+
                                "INNER JOIN Dias D2 ON Horario.Dia2 = D2.idDias "+
                                "INNER JOIN Dias D3 ON Horario.Dia3 = D3.idDias "+
                                "INNER JOIN salon ON horario.idSalon = salon.idSalon "+
                                "where concat(tituloProfesor,' ',nombreProfesor,' ',apellidoPaternoProfesor,' ',apellidoMaternoProfesor) like '%"+nombreProf+"%'\n"+
                                "AND salon like '%"+salon+"%'\n"+
                                "ORDER BY Dia1, asignatura, horaEntrada, grupo, salon;";*/
                        horariosRs = orden.executeQuery("SELECT concat(Horario.horaEntrada, ' - ', Horario.horaSalida) as Horario, Horario.grupo as Grupo, Horario.tipo as Tipo, salon.salon as Salon, salon.cupoSalon as Cupo, salon.vacanteSalon as Vacante, "+
                               "D1.dias AS 'Dia 1', D2.dias AS 'Dia 2' , D3.dias AS 'Dia 3', Asignatura.claveAsignatura as Clave, Asignatura.nombreAsignatura as Asignatura, Profesor.folioProfesor as 'Folio Profesor'," +
                                "concat(Profesor.tituloProfesor,' ',Profesor.nombreProfesor,' ',Profesor.apellidoPaternoProfesor,' ', Profesor.apellidoMaternoProfesor) as Profesor "+
                                "FROM Horario "+
                                "INNER JOIN Asignatura ON Horario.idAsignatura = Asignatura.idAsignatura "+
                                "INNER JOIN Profesor ON Horario.idProfesor = Profesor.idProfesor "+
                                "INNER JOIN Dias D1 ON Horario.Dia1 = D1.idDias "+
                                "INNER JOIN Dias D2 ON Horario.Dia2 = D2.idDias "+
                                "INNER JOIN Dias D3 ON Horario.Dia3 = D3.idDias "+
                                "INNER JOIN salon ON horario.idSalon = salon.idSalon "+
                                "ORDER BY Dia1, asignatura, horaEntrada, grupo, salon;");
		
		
       
            FileOutputStream archivo = new FileOutputStream(ruta+".pdf");
            Document doc = new Document();
            PdfWriter writer = PdfWriter.getInstance(doc, archivo);
            doc.open();
            //doc.add(new Paragraph(contenido));
            PdfContentByte cb = writer.getDirectContent();
           // BaseFont bf = BaseFont.createFont(BaseFont.COURIER_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
           Paragraph par1 = new Paragraph();
           Font fonTitulo = new Font(Font.FontFamily.TIMES_ROMAN,16,Font.BOLD,BaseColor.BLACK);//titulo del pdf
           par1.add(new Phrase("Reporte de Horarios",fonTitulo));
           par1.setAlignment(Element.ALIGN_CENTER);
           par1.add(new Phrase(Chunk.NEWLINE));
           par1.add(new Phrase(Chunk.NEWLINE));
           doc.add(par1);
           
            PdfPTable tabla = new PdfPTable(13);
            PdfPCell celda1 = new PdfPCell(new Paragraph("Horario", FontFactory.getFont("Arial", 7,Font.BOLD,BaseColor.BLACK)));
            PdfPCell celda2 = new PdfPCell(new Paragraph("Grupo", FontFactory.getFont("Arial", 7,Font.BOLD,BaseColor.BLACK)));
            PdfPCell celda3 = new PdfPCell(new Paragraph("Tipo", FontFactory.getFont("Arial", 7,Font.BOLD,BaseColor.BLACK)));
            PdfPCell celda4 = new PdfPCell(new Paragraph("Salon", FontFactory.getFont("Arial", 7,Font.BOLD,BaseColor.BLACK)));
            PdfPCell celda5 = new PdfPCell(new Paragraph("Cupo", FontFactory.getFont("Arial", 7,Font.BOLD,BaseColor.BLACK)));
            PdfPCell celda6 = new PdfPCell(new Paragraph("Vacante", FontFactory.getFont("Arial", 7,Font.BOLD,BaseColor.BLACK)));
            PdfPCell celda7 = new PdfPCell(new Paragraph("Dia1", FontFactory.getFont("Arial", 7,Font.BOLD,BaseColor.BLACK)));
            PdfPCell celda8 = new PdfPCell(new Paragraph("Dia2", FontFactory.getFont("Arial", 7,Font.BOLD,BaseColor.BLACK)));
            PdfPCell celda9 = new PdfPCell(new Paragraph("Dia3", FontFactory.getFont("Arial", 7,Font.BOLD,BaseColor.BLACK)));
            PdfPCell celda10 = new PdfPCell(new Paragraph("Clave", FontFactory.getFont("Arial", 7,Font.BOLD,BaseColor.BLACK)));
            PdfPCell celda11 = new PdfPCell(new Paragraph("Asignatura", FontFactory.getFont("Arial", 6,Font.BOLD,BaseColor.BLACK)));
            PdfPCell celda12 = new PdfPCell(new Paragraph("Folio", FontFactory.getFont("Arial", 7,Font.BOLD,BaseColor.BLACK)));
            PdfPCell celda13 = new PdfPCell(new Paragraph("Profesor", FontFactory.getFont("Arial", 6,Font.BOLD,BaseColor.BLACK)));
            
            tabla.addCell(celda1);
            tabla.addCell(celda2);
            tabla.addCell(celda3);
            tabla.addCell(celda4);
            tabla.addCell(celda5);
            tabla.addCell(celda6);
            tabla.addCell(celda7);
            tabla.addCell(celda8);
            tabla.addCell(celda9);
            tabla.addCell(celda10);
            tabla.addCell(celda11);
            tabla.addCell(celda12);
            tabla.addCell(celda13);
           
           
            while (horariosRs.next()){
                tabla.addCell(horariosRs.getString(1));
                tabla.addCell(horariosRs.getString(2));
                tabla.addCell(horariosRs.getString(3));
                tabla.addCell(horariosRs.getString(4));
                tabla.addCell(horariosRs.getString(5));
                tabla.addCell(horariosRs.getString(6));
                tabla.addCell(horariosRs.getString(7));
                tabla.addCell(horariosRs.getString(8));
                tabla.addCell(horariosRs.getString(9));
                tabla.addCell(horariosRs.getString(10));
                tabla.addCell(horariosRs.getString(11));
                tabla.addCell(horariosRs.getString(12));
                tabla.addCell(horariosRs.getString(13));
            }
            doc.add(tabla);
           // cb.setTextMatrix(50,590);//posicion del texto
            //cb.showText("Horario: "+ nameField.getText());//el dato que se va a poner
            //cb.setTextMatrix(50,560);//posicion del texto
           // cb.showText("Tipo: "+nameFiled.getText());
            
            doc.close();
           
           
            JOptionPane.showMessageDialog(null, "Pdf correctamente creado");
            
        
            
        }catch (Exception e){
			JOptionPane.showMessageDialog(null, "Error, no se pueden mostrar los Horarios" + e.getMessage(),
				"ERROR", JOptionPane.ERROR_MESSAGE);
                        System.err.println("Error"+e);
		}finally{
			ConexionBD.cerrarConexion();
		}
        //setDefaultCloseOperation(EXIT_ON_CLOSE);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GeneradorPDF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GeneradorPDF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GeneradorPDF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GeneradorPDF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GeneradorPDF().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JTextField txtRuta;
    // End of variables declaration//GEN-END:variables
}
